package core

import java.io.File


/**
 * Created by gmgilmore on 3/2/15.
 */
object LSFMConfigFileParser {

  val VALID_OPTIONS: Map[String, String] = Map("player" -> OperatingSystem.getOS.getDefaultVLCLocation, "delay" -> 
    "5000",
    "ipandport" -> "localhost:9999", "livestreamerconfiglocation" -> {
      val path = ArgParser.getClass.getProtectionDomain.getCodeSource.getLocation.getPath
      val fixedPath = path.subSequence(0, path.lastIndexOf(File.separator) + 1)
      fixedPath.toString
    })

  /**
   *
   * @param pathToConfig the path to the location of the LivestreamerFM configuration file. File format follows:
   *

                         Ex:
      
          player = /Applications/VLC.app/Contents/MacOS/VLC
          delay = 5005
          ipAndPort = 192.168.1.1:9999
          livestreamerConfigLocation = /Users/gmgilmore/
      
      The file should be a plain text file with each new line having the following format:
      
          [OPTION] = [VALUE]
      
      The options that you can choose from are `player` , `delay` , `ipAndPort` , and `livestreamerConfigLocation`. 
      All these
      options are optional (heh) - you can include any of them, or none of them. They are also case-insensitive.
          
      If you don't follow this format, livestreamerFM will throw an exception when it tries to read the file.
      
      ###Option descriptions:
      
      `player` - The value should be path to the vlc executable on your machine. If this option is not used, 
      LivestreamerFM will attempt to guess where VLC is located on your machine. 
      
      `delay` - The value should be number of milliseconds that you want LivestreamerFM to cache the audio for. This is 
      used to improve performance and mitigate stuttering. If this option is not used, `delay` will default to 5000 ms.
      
      `ipAndPort` - The value should the IP address that you want the audio server to bind to, followed by the port 
      that you want the audio server to use, separated by a colon. If this option is not used, `ipAndPort` will 
                         default to 
      `localhost:9999`.
      
      `livestreamerConfigLocation` - The value should be the path that you want the livestreamer config file that is 
      generated by livestreamerFM to be saved in. If this option is not used, `livestreamerConfigLocation` will
                         default to the
      directory that livestreamerFM is running in. 
   *
   * @return either a configfileformaterror, if the file format was not as described above, or a LSFMConfigOptions that
   *         contains all the information defined in the configuration file (or default information as referred to 
   *         above)
   *
   */
  def parseConfigFile(lines: List[String]): Either[Set[GeneralError], LSFMConfigOptions] = {
    val results = lines.filter(x => !x.isEmpty).map(line => parseIndivididualLine(line)).toList
    val (err, userOptions) = split[GeneralError, Option](results)
    if (!err.isEmpty) Left(err.toSet)
    else {
      val usersOptionsMap = userOptions.foldLeft(Map[String, String]()) { (m, x) => m.updated(x.name, x.value)}
      Right(LSFMConfigOptions.buildLSFMConfigOption(usersOptionsMap))
    }

  }


  /**
   *
   * @param line
   * @return
   */
  private def parseIndivididualLine(line: String): Either[GeneralError, Option] = {
    line.split("=").map(_.trim) match {
      case Array(name, value) => {
        if (VALID_OPTIONS.keySet.contains(name.toLowerCase)) Right(Option(name.toLowerCase, value))
        else Left(InvalidOption)
      }
      case _ => Left(NoOptionValSeparation)
    }
  }

  def split[E, V](results: List[Either[E, V]]): (List[E], List[V]) = {
    def loop(listE: List[E], listV: List[V], rest: List[Either[E, V]]): (List[E], List[V]) = rest match {
      case Nil => (listE, listV)
      case Right(v) :: x => loop(listE, listV :+ v, rest.tail)
      case Left(e) :: x => loop(listE :+ e, listV, rest.tail)
    }
    loop(List(), List(), results)
  }

  private case class Option(name: String, value: String)

}
